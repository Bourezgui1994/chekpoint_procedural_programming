

// determine the dot product with a procedure 
PROCEDURE dot_product(Var ps :INTEGER, v1,v2: ARRAY_OF INTEGER[50])


VAR

  v1,v2: ARRAY_OF INTEGER[50]; 
  i,j,ps :INTEGER;

BEGIN
 Write(write the elements of the array v1);
 Read(v1[i]);
  Write(write the elements of the array v1);
 Read(v2[j]);
 Read(ps);

// calculate the dot product ps 

REPEAT
   ps := ps + v1[i]*v2[j];
UNTIL (i>50 and j>50)


ALGORITHM procedure dot_product

VAR
    v1,v2: ARRAY_OF INTEGER[50];
    i,j,ps:INTEGER;
BEGIN
 Read (ps);
 Read (v1[i]);
 Read (v2[j]);

// read the dot product ps 
ps:= dot_product()
    IF (ps:=0) THEN
        write(v1 and v2 are orthogonal);
    
    ELSE
       write(v1 and v2 are not orthogonal);
    
    END_IF
END

// determine the dot product with function 

FUNCTION dot_product() : INTEGER

VAR


  i,j,ps:INTEGER;
  v1,v2: ARRAY_OF INTEGER[50];
    
BEGIN
 Read (ps);
 Read (v1[i]);
 Read (v2[j]);

   REPEAT
   ps := ps + v1[i]*v2[j];
   UNTIL (i>50 and j>50)
    
    RETURN ps ;
END


ALGORITHM function dot_product

VAR
    v1,v2: ARRAY_OF INTEGER[50];
    i,j,ps:INTEGER;
BEGIN
 Read (ps)
 Read (v1[i])
 Read (v2[j])

// read the dot product ps 
ps:= dot_product()
    IF (ps:=0) THEN
        write(v1 and v2 are orthogonal);
    
    ELSE
       write(v1 and v2 are not orthogonal);
    
    END_IF
END

